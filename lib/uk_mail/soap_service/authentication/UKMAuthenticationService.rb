# encoding: UTF-8
# Generated by wsdl2ruby (SOAP4R-NG/2.0.3)
require 'xsd/qname'

module UKMail; module SoapService; module Authentication


# {http://www.UKMail.com/Services/Contracts/DataContracts}LoginWebRequest
#   password - SOAP::SOAPString
#   username - SOAP::SOAPString
class LoginWebRequest
  attr_accessor :password
  attr_accessor :username

  def initialize(password = nil, username = nil)
    @password = password
    @username = username
  end
end

# {http://www.UKMail.com/Services/Contracts/DataContracts}UKMWebResponse
#   errors - UKMail::SoapService::Authentication::ArrayOfUKMWebError
#   result - UKMail::SoapService::Authentication::UKMResultState
#   warnings - UKMail::SoapService::Authentication::ArrayOfUKMWebWarning
class UKMWebResponse
  attr_accessor :errors
  attr_accessor :result
  attr_accessor :warnings

  def initialize(errors = nil, result = nil, warnings = nil)
    @errors = errors
    @result = result
    @warnings = warnings
  end
end

# {http://www.UKMail.com/Services/Contracts/DataContracts}UKMLoginResponse
#   errors - UKMail::SoapService::Authentication::ArrayOfUKMWebError
#   result - UKMail::SoapService::Authentication::UKMResultState
#   warnings - UKMail::SoapService::Authentication::ArrayOfUKMWebWarning
#   accounts - UKMail::SoapService::Authentication::ArrayOfAccountWebModel
#   authenticationToken - SOAP::SOAPString
class UKMLoginResponse < UKMWebResponse
  attr_accessor :errors
  attr_accessor :result
  attr_accessor :warnings
  attr_accessor :accounts
  attr_accessor :authenticationToken

  def initialize(errors = nil, result = nil, warnings = nil, accounts = nil, authenticationToken = nil)
    @errors = errors
    @result = result
    @warnings = warnings
    @accounts = accounts
    @authenticationToken = authenticationToken
  end
end

# {http://www.UKMail.com/Services/Contracts/DataContracts}UKMLogoutResponse
#   errors - UKMail::SoapService::Authentication::ArrayOfUKMWebError
#   result - UKMail::SoapService::Authentication::UKMResultState
#   warnings - UKMail::SoapService::Authentication::ArrayOfUKMWebWarning
class UKMLogoutResponse < UKMWebResponse
  attr_accessor :errors
  attr_accessor :result
  attr_accessor :warnings

  def initialize(errors = nil, result = nil, warnings = nil)
    @errors = errors
    @result = result
    @warnings = warnings
  end
end

# {http://www.UKMail.com/Services/Contracts/DataContracts}ArrayOfUKMWebError
class ArrayOfUKMWebError < ::Array
end

# {http://www.UKMail.com/Services/Contracts/DataContracts}UKMWebError
#   code - SOAP::SOAPInt
#   description - SOAP::SOAPString
class UKMWebError
  attr_accessor :code
  attr_accessor :description

  def initialize(code = nil, description = nil)
    @code = code
    @description = description
  end
end

# {http://www.UKMail.com/Services/Contracts/DataContracts}ArrayOfUKMWebWarning
class ArrayOfUKMWebWarning < ::Array
end

# {http://www.UKMail.com/Services/Contracts/DataContracts}UKMWebWarning
#   code - SOAP::SOAPInt
#   description - SOAP::SOAPString
class UKMWebWarning
  attr_accessor :code
  attr_accessor :description

  def initialize(code = nil, description = nil)
    @code = code
    @description = description
  end
end

# {http://www.UKMail.com/Services/Contracts/DataContracts}ArrayOfAccountWebModel
class ArrayOfAccountWebModel < ::Array
end

# {http://www.UKMail.com/Services/Contracts/DataContracts}AccountWebModel
#   accountNumber - SOAP::SOAPString
#   accountStatus - UKMail::SoapService::Authentication::AccountStatusEnum
#   accountType - UKMail::SoapService::Authentication::AccountTypeEnum
#   alternativeRefAlias - SOAP::SOAPString
#   companyName - SOAP::SOAPString
#   contactNumber - SOAP::SOAPString
#   customerRefAlias - SOAP::SOAPString
#   postcode - SOAP::SOAPString
#   region - UKMail::SoapService::Authentication::RegionEnum
#   tradingAddress - SOAP::SOAPString
#   vATNumber - SOAP::SOAPString
class AccountWebModel
  attr_accessor :accountNumber
  attr_accessor :accountStatus
  attr_accessor :accountType
  attr_accessor :alternativeRefAlias
  attr_accessor :companyName
  attr_accessor :contactNumber
  attr_accessor :customerRefAlias
  attr_accessor :postcode
  attr_accessor :region
  attr_accessor :tradingAddress
  attr_accessor :vATNumber

  def initialize(accountNumber = nil, accountStatus = nil, accountType = nil, alternativeRefAlias = nil, companyName = nil, contactNumber = nil, customerRefAlias = nil, postcode = nil, region = nil, tradingAddress = nil, vATNumber = nil)
    @accountNumber = accountNumber
    @accountStatus = accountStatus
    @accountType = accountType
    @alternativeRefAlias = alternativeRefAlias
    @companyName = companyName
    @contactNumber = contactNumber
    @customerRefAlias = customerRefAlias
    @postcode = postcode
    @region = region
    @tradingAddress = tradingAddress
    @vATNumber = vATNumber
  end
end

# {http://www.UKMail.com/Services/Contracts/DataContracts}WebRequest
#   authenticationToken - SOAP::SOAPString
#   username - SOAP::SOAPString
class WebRequest
  attr_accessor :authenticationToken
  attr_accessor :username

  def initialize(authenticationToken = nil, username = nil)
    @authenticationToken = authenticationToken
    @username = username
  end
end

# {http://www.UKMail.com/Services/Contracts/DataContracts}AccountStatusEnum
class AccountStatusEnum < ::String
  Active = new("Active")
  Closed = new("Closed")
  ExemptFromStop = new("ExemptFromStop")
  FastTrack = new("FastTrack")
  OnStop = new("OnStop")
  Under7DayReview = new("Under7DayReview")
end

# {http://www.UKMail.com/Services/Contracts/DataContracts}AccountTypeEnum
class AccountTypeEnum < ::String
  Domestic = new("Domestic")
  EURoad = new("EURoad")
  International = new("International")
  MailPackets = new("MailPackets")
end

# {http://www.UKMail.com/Services/Contracts/DataContracts}RegionEnum
class RegionEnum < ::String
  England = new("England")
  Northern_Ireland = new("Northern_Ireland")
  Scotland = new("Scotland")
  Wales = new("Wales")
end

# {http://schemas.datacontract.org/2004/07/UKMWebAPICommon.WebResponses}UKMResultState
class UKMResultState < ::String
  Failed = new("Failed")
  Successful = new("Successful")
  Unknown = new("Unknown")
end

# {http://www.UKMail.com/Services/Contracts/ServiceContracts}Login
#   loginWebRequest - UKMail::SoapService::Authentication::LoginWebRequest
class Login
  attr_accessor :loginWebRequest

  def initialize(loginWebRequest = nil)
    @loginWebRequest = loginWebRequest
  end
end

# {http://www.UKMail.com/Services/Contracts/ServiceContracts}LoginResponse
#   loginResult - UKMail::SoapService::Authentication::UKMLoginResponse
class LoginResponse
  attr_accessor :loginResult

  def initialize(loginResult = nil)
    @loginResult = loginResult
  end
end

# {http://www.UKMail.com/Services/Contracts/ServiceContracts}Logout
#   webRequest - UKMail::SoapService::Authentication::WebRequest
class Logout
  attr_accessor :webRequest

  def initialize(webRequest = nil)
    @webRequest = webRequest
  end
end

# {http://www.UKMail.com/Services/Contracts/ServiceContracts}LogoutResponse
#   logoutResult - UKMail::SoapService::Authentication::UKMLogoutResponse
class LogoutResponse
  attr_accessor :logoutResult

  def initialize(logoutResult = nil)
    @logoutResult = logoutResult
  end
end


end; end; end
